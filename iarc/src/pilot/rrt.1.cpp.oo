#include "iarc/pilot/rrt.h"
#include <iarc/obstacle.h>
#include <random>
#include <cmath>
using namespace std;
#define random(x) (rand()%x)


default_random_engine grow((unsigned int)(time(0)));  
default_random_engine gcol((unsigned int)(time(0)*1000.));  
uniform_int_distribution<int> row(0,30);
uniform_int_distribution<int> col(0,40);
auto r_row= bind(row,grow);
auto r_col= bind(col,gcol);

iarc::path result;


rrt::rrt()
{
    start_point <<  0.,
                    0.;
    route.resize(2,2);
    route <<    1,2,
                3,4;
    MatrixXf cost=MatrixXf::Zero(30,40);
    Vector2f p1(0,0);
    Vector2f p2(2,2);
    Vector2f o;
    MatrixXf oo;
    cout << route << endl;
    oo = route.col(0);
    int a = route(0),b = route(1);
    o << a,
        b;
    cout << oo <<endl<<"lalalal"<<endl;
    cout << "132";
    cout << collision(p1,p2,o)<< endl;
}

float rrt::dist(Vector2f p1,Vector2f p2)
{
    return pow((p1-p2).dot(p1-p2),0.5);
}

float rrt::dist(float x1,float y1,float x2,float y2)
{
    return pow((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2),0.5);

}

bool rrt::collision(Vector2f p1,Vector2f p2,Vector2f o)
{
    if( dist(p1,o)<=radius || dist(p2,o)<=radius )
        return 1;
    else
    {
        float temp = abs(pow(1-radius*radius/pow(dist(p1,o),2),0.5));
        if(temp<((o-p1).dot(p2-p1)/((o-p1).norm()*(p2-p1).norm())))
            return 1;
        else
            return 0;
    }
}


Vector2f rrt::resample(Vector2f st,Vector2f end)
{
    Vector2f tempr;
    // temp << r_col(),
    //         r_row();
    
    tempr << (int)(40.0*rand()/(RAND_MAX+1.0)),
            (int)(30.0*rand()/(RAND_MAX+1.0));
    while(tempr.dot(end)<0. || is_map((int)tempr(0),(int)tempr(1))==2 || is_map(tempr(0),tempr(1))==1)
    {
        tempr << (int)(40.0*rand()/(RAND_MAX+1.0)),
            (int)(30.0*rand()/(RAND_MAX+1.0));
    }
    cout << tempr(0)<<"\t" << tempr(1)<< endl;
    cout << "jkl";
    return tempr;

}

void rrt::fill(float obs_x,float obs_y,int r)
{
    int ox = (int)(obs_x/0.1)+20;
    int oy = (int)(obs_y/0.1)+15;
    for(int i=0;i<30;i++)
        {
            for(int j=0;j<40;j++)
            {
                if(dist(i,j,oy,ox)<=r)
                    is_map(i,j)=2;
                // if(is_map(i,j)==1)
                
            }
        }

}

iarc::path rrt::output(float target_x,float target_y,float obs_x,float obs_y)
{
    MatrixXf routine;
    // obs = obstacle;
    // int obs_num = obs.num;
    end_point << target_x,
                target_y;
    // 1 route
    // 2 obstacle 
    // 0 not
    //srand((int)(time(0)*1000.)); 
    is_map(15,20) = 1;
    level(15,20) = 1;
    fill(obs_x,obs_y,8);
    float min_dis = 1.5;
    cout << "ec"<<endl;
    for(int seed;seed<=seeds;seed++)
    {
        sample_point = resample(start_point,end_point);
        cout << sample_point(0)<< sample_point(1)<<"sp"<<endl;
        bool sample_valid = 0;
        for(int i=0;i<30;i++)
        {
            for(int j=0;j<40;j++)
            {
                if(is_map(i,j)==1)
                {
                    Vector2f temp;
                    temp<< i,
                        j;
                        cout <<"i"<< i<<"j"<<j<<endl;
                    if( dist(temp,sample_point)<=min_dis)
                    {
                        switch(1)
                        {
                            case 0:
                            {
                                sample_valid = 1;
                                break;
                            }
                            case 1:
                            {
                                sample_valid = 1;
                                break;
                            }
                            case 2:
                            {
                                sample_valid = 1;
                                break;
                            }
                            case 3:
                            {
                                sample_valid = 1;
                                break;
                            }
                            case 4:
                            {
                                sample_valid = 1;
                                break;
                            }
                        }
                        
                    }
                    if(sample_valid == 1)
                    {
                        parent_x(sample_point(0),sample_point(1)) = i;
                        parent_y(sample_point(0),sample_point(1)) = j;
                        level(sample_point(0),sample_point(1)) = level(i,j)+1;
                        is_map(sample_point(0),sample_point(1)) = 1;
                        //if()
                    }
                    else
                    {
                        is_map(sample_point(0),sample_point(1)) = 0;
                    }
                    
                }
            }
        }
        if(dist(end_point,sample_point)<=min_dis && sample_valid==1)
        {
            int levels=level(sample_point(0),sample_point(1));
            result.len = levels;
            result.x.resize(levels);
            result.y.resize(levels);
            int tempi = sample_point(0);
            int tempj = sample_point(1);
            for(int cc=0;cc<levels;cc++)
            {
                result.x[levels-cc-1] = tempi;
                result.y[levels-cc-1] = tempj;
                int a = tempi;
                int b = tempj;
                tempi = parent_x(a,b);
                tempj = parent_y(a,b);
            }
            return result;
        }
    }
    return result;
}