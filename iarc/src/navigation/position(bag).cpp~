#include <ros/ros.h>

#include <sys/time.h>
#include <unistd.h>
#include <time.h>
#include <fstream> 

#include <cv_bridge/cv_bridge.h>

#include <sensor_msgs/LaserScan.h>
#include <geometry_msgs/TransformStamped.h>
#include <geometry_msgs/Vector3Stamped.h>

#include "iarc/navigation/common.h"
#include "iarc/navigation/math.h"
#include "iarc/navigation/find_line.h"

Mat ImageSource;
int ImageNumber;


ros::Subscriber mono_video_sub;
ros::Subscriber position_sub;
ros::Subscriber imu_sub;
ros::Subscriber ultrasonic_sub;

Mat R_g_bQuaternion = Mat(4, 1, CV_32FC1, Scalar(0));
Mat R_g_b = Mat(3, 3, CV_32FC1, Scalar(0));
Mat R_cz_g = Mat(3, 3, CV_32FC1, Scalar(0));
Mat R_cz_b = Mat::ones(3, 3, CV_32FC1);

Mat PilotPosition = Mat(3, 1, CV_32FC1, Scalar(0));

float Height = 0;

bool FirstFlag = true;

float CheckX = 0;
float CheckY = 0;
float StartX = 1;
float StartY = 1;


void mono_sub_callback(sensor_msgs::Image img_msg)
{ 
	cv_bridge::CvImagePtr img_bridge_ptr = cv_bridge::toCvCopy(img_msg,sensor_msgs::image_encodings::BGR8);       
	img_bridge_ptr->image.copyTo(ImageSource);   
	ImageNumber++;
}
void imu_callback(const geometry_msgs::TransformStamped& g_imu)
{ 
	R_g_bQuaternion.at<float>(0, 0) = g_imu.transform.rotation.w;
	R_g_bQuaternion.at<float>(1, 0) = g_imu.transform.rotation.x;
	R_g_bQuaternion.at<float>(2, 0) = g_imu.transform.rotation.y;
	R_g_bQuaternion.at<float>(3, 0) = g_imu.transform.rotation.z;

	Quaternion2Matrix(R_g_bQuaternion,  R_g_b);
	R_cz_b = R_cz_g * R_g_b;
}
void position_callback(const geometry_msgs::Vector3Stamped& g_pos)
{
	PilotPosition.at<float>(0, 0) = g_pos.vector.x;
	PilotPosition.at<float>(1, 0) = g_pos.vector.y;
	PilotPosition.at<float>(2, 0) = g_pos.vector.z;
	
	PilotPosition = R_cz_g * PilotPosition;
	
	if(FirstFlag)
	{
	    CheckX = PilotPosition.at<float>(0,0);
	    CheckY = PilotPosition.at<float>(1,0);
	    FirstFlag = false;
	}
	PilotPosition.at<float>(0, 0) += StartX - CheckX; 
	PilotPosition.at<float>(1, 0) += StartY - CheckY;
}

void ultrasonic_callback(const sensor_msgs::LaserScan& g_ul)
{ 
	if(g_ul.ranges[0] > 0.)
	{
		Height = g_ul.ranges[0];
		//cout << Height << endl;
	}

}
int main(int argc, char** argv)
{
  ros::init(argc, argv, "mjh_vision_pos");
  ros::NodeHandle my_node;
  ros::Rate rate(5);
  
  ifstream Q_Init("/home/hitcsc/catkin_ws/src/iarc007/src/JRH_pilot/data/Q_INIT.txt");
  if(!Q_Init.is_open())
  {
    cout << "Can't open Q_INIT.txt!" << endl;
    exit(-1);
  }
  
  string s;
  Mat R_g_czQuaternion = Mat(4, 1, CV_32FC1, Scalar(0));
  for(int i = 0; i < 4; i++)
  {
    Q_Init >> s;
    R_g_czQuaternion.at<float>(i, 0) = atof(s.c_str());
  }
  cout << R_g_czQuaternion << endl;
  Mat R_g_cz = Mat(3, 3, CV_32FC1, Scalar(0));
  Quaternion2Matrix(R_g_czQuaternion, R_g_cz);
  R_cz_g = R_g_cz.t();
  
  CvMat* R_ca_chess0 = (CvMat*)cvLoad("/home/hitcsc/catkin_ws/src/iarc007/doc/Rotation.xml");
  Mat R_ca_chess = Mat(R_ca_chess0, true);
  if(!R_ca_chess.data)
  {
    cout << "Can't open Rotation.xml" << endl;
    exit(-1);
  }
  
  CvMat* R_chess_b0=(CvMat*)cvLoad("/home/hitcsc/catkin_ws/src/iarc007/doc/R_chess_b.xml");
  Mat R_chess_b = Mat(R_chess_b0, true); 
  if(!R_chess_b.data)
  {
    cout << "Can't open R_chess_b.xml!" << endl;
    exit(-1);
  };
  
  Mat R_ca_b = R_ca_chess * R_chess_b;
  Mat R_b_ca = R_ca_b.t();
  
  CvMat* Intrinsic0 = (CvMat*)cvLoad("/home/hitcsc/catkin_ws/src/iarc007/doc/Intrinsics.xml");
  Mat Intrinsic = Mat(Intrinsic0, true);
  Mat R_ca_pic = Intrinsic.inv();
  Mat R_b_pic = R_b_ca * R_ca_pic;
  
  mono_video_sub = my_node.subscribe<sensor_msgs::Image>("/iarc007/mono_video1",2,mono_sub_callback);
  imu_sub = my_node.subscribe("/guidance/imu", 10, imu_callback);
  position_sub = my_node.subscribe("/guidance/position",20, position_callback);
  ultrasonic_sub = my_node.subscribe("/guidance/ultrasonic", 1, ultrasonic_callback);
  
  int CurrentImageNumber;
  
  int N = 0; 
  
  ofstream HeightF("/home/hitcsc/bianjie/Height.txt");
  ofstream R("/home/hitcsc/bianjie/R.txt");
  
  while(ros::ok())
  {
    ros::spinOnce();
    rate.sleep();
    
     if(!ImageSource.data)
    {
      cout << "No image!" << endl;
      continue;
    }
    if(CurrentImageNumber == ImageNumber)
    {
      cout << "Next image doesn't come!" << endl;
      continue;
    }
    Mat R_cz_pic = R_cz_b * R_b_pic;
    for(int i = 0; i < 3; i++)
    {
      for(int j = 0; j < 3; j++)
      {
	R << R_cz_pic.at<float>(i, j) << "\t";
      }
    }
    R << endl;
    HeightF << Height << endl;
    
    char Name[100];
    sprintf(Name, "/home/hitcsc/bianjie/Image/%d.jpg", N);
    imwrite(Name, ImageSource);
    N++;
    bool FindedFlag;
    Point2f MiddlePoint;
    FindedFlag = FindLine(ImageSource, R_cz_pic, Height, MiddlePoint, WhiteLine, 90);
    FindedFlag = FindLine(ImageSource, R_cz_pic, Height, MiddlePoint, RedLine, 90);
    FindedFlag = FindLine(ImageSource, R_cz_pic, Height, MiddlePoint, RedLine, 0);
    FindedFlag = FindLine(ImageSource, R_cz_pic, Height, MiddlePoint, GreenLine, 0);
    imshow("原图", ImageSource);
    waitKey(1);
    CurrentImageNumber = ImageNumber;
  }
  return 0;
}
